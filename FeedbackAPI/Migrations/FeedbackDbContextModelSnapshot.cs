// <auto-generated />
using System;
using FeedbackAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FeedbackAPI.Migrations
{
    [DbContext(typeof(FeedbackDbContext))]
    partial class FeedbackDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FeedbackAPI.Data.Domain.Entities.Feedback", b =>
                {
                    b.Property<int>("FeedbackID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FeedbackComment")
                        .HasMaxLength(500);

                    b.Property<int>("FeedbackScore");

                    b.Property<int>("GameSessionID");

                    b.Property<int>("PlayerID");

                    b.Property<DateTime>("SubmissionDate");

                    b.HasKey("FeedbackID");

                    b.HasIndex("GameSessionID");

                    b.HasIndex("PlayerID");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("FeedbackAPI.Data.Domain.Entities.Game", b =>
                {
                    b.Property<int>("GameID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GameName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("ReleaseYear");

                    b.HasKey("GameID");

                    b.ToTable("Games");

                    b.HasData(
                        new { GameID = 1, GameName = "The Witcher", Publisher = "CD Project", ReleaseYear = 2017 },
                        new { GameID = 2, GameName = "Gears Of War", Publisher = "Microsoft", ReleaseYear = 2009 },
                        new { GameID = 3, GameName = "Pillars Of Eternity", Publisher = "Paradox", ReleaseYear = 2015 },
                        new { GameID = 4, GameName = "XCOM2", Publisher = "2K", ReleaseYear = 2017 }
                    );
                });

            modelBuilder.Entity("FeedbackAPI.Data.Domain.Entities.GameSession", b =>
                {
                    b.Property<int>("GameSessionID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GameID");

                    b.Property<DateTime>("SessionEndTime");

                    b.Property<DateTime>("SessionStartTime");

                    b.HasKey("GameSessionID");

                    b.HasIndex("GameID");

                    b.ToTable("GameSessions");

                    b.HasData(
                        new { GameSessionID = 1, GameID = 1, SessionEndTime = new DateTime(2019, 9, 1, 12, 8, 52, 468, DateTimeKind.Local), SessionStartTime = new DateTime(2019, 9, 1, 7, 8, 52, 468, DateTimeKind.Local) },
                        new { GameSessionID = 2, GameID = 1, SessionEndTime = new DateTime(2019, 8, 23, 12, 8, 52, 468, DateTimeKind.Local), SessionStartTime = new DateTime(2019, 8, 22, 12, 8, 52, 468, DateTimeKind.Local) },
                        new { GameSessionID = 3, GameID = 1, SessionEndTime = new DateTime(2019, 8, 14, 13, 8, 52, 468, DateTimeKind.Local), SessionStartTime = new DateTime(2019, 8, 12, 11, 8, 52, 468, DateTimeKind.Local) },
                        new { GameSessionID = 4, GameID = 2, SessionEndTime = new DateTime(2019, 7, 8, 22, 28, 52, 468, DateTimeKind.Local), SessionStartTime = new DateTime(2019, 7, 8, 11, 8, 52, 468, DateTimeKind.Local) },
                        new { GameSessionID = 5, GameID = 2, SessionEndTime = new DateTime(2019, 7, 13, 13, 27, 52, 468, DateTimeKind.Local), SessionStartTime = new DateTime(2019, 7, 13, 7, 28, 52, 468, DateTimeKind.Local) },
                        new { GameSessionID = 6, GameID = 3, SessionEndTime = new DateTime(2019, 9, 8, 15, 8, 52, 468, DateTimeKind.Local), SessionStartTime = new DateTime(2019, 9, 8, 2, 13, 52, 468, DateTimeKind.Local) }
                    );
                });

            modelBuilder.Entity("FeedbackAPI.Data.Domain.Entities.Player", b =>
                {
                    b.Property<int>("PlayerID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ScreenName")
                        .IsRequired();

                    b.HasKey("PlayerID");

                    b.ToTable("Players");

                    b.HasData(
                        new { PlayerID = 1, ScreenName = "Geralt" },
                        new { PlayerID = 2, ScreenName = "Marcus" },
                        new { PlayerID = 3, ScreenName = "Watcher" },
                        new { PlayerID = 4, ScreenName = "Bradford" }
                    );
                });

            modelBuilder.Entity("FeedbackAPI.Data.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("FeedbackAPI.Data.Domain.Entities.GameSession")
                        .WithMany()
                        .HasForeignKey("GameSessionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FeedbackAPI.Data.Domain.Entities.Player")
                        .WithMany()
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FeedbackAPI.Data.Domain.Entities.GameSession", b =>
                {
                    b.HasOne("FeedbackAPI.Data.Domain.Entities.Game")
                        .WithMany()
                        .HasForeignKey("GameID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
